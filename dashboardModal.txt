z  {/** Form Preview Dailog  - OK */}
              <Dialog
                fullWidth
                maxWidth={"lg"}
                open={formPreviewDailog}
                onClose={() => formPreviewDailogClose()}
              >
                <CssBaseline />
                <DialogTitle>
                  <Grid container>
                    <Grid item xs={6} sm={6} lg={6} xl={6} md={6}>
                      Preview
                    </Grid>
                    <Grid
                      item
                      xs={1}
                      sm={2}
                      md={4}
                      lg={6}
                      xl={6}
                      sx={{ display: "flex", justifyContent: "center" }}
                    >
                      <IconButton
                        aria-label='delete'
                        sx={{
                          marginLeft: "530px",
                          backgroundColor: "primary",
                          ":hover": {
                            bgcolor: "red", // theme.palette.primary.main
                            color: "white",
                          },
                        }}
                        onClick={() => formPreviewDailogClose()}
                      >
                        <CloseIcon
                          sx={{
                            color: "black",
                          }}
                        />
                      </IconButton>
                    </Grid>
                  </Grid>
                </DialogTitle>
                <DialogContent>
                  {/**
                  <BasicApplicationDetails />
                  <HawkerDetails />
                  <AddressOfHawker />
                  <AadharAuthentication />
                  <PropertyAndWaterTaxes />
                  <AdditionalDetails />
                  */}
                </DialogContent>

                <DialogTitle>
                  <Grid
                    item
                    xs={12}
                    sm={12}
                    md={12}
                    lg={12}
                    xl={12}
                    sx={{ display: "flex", justifyContent: "flex-end" }}
                  >
                    <Button onClick={() => formPreviewDailogClose()}>
                      Exit
                    </Button>
                  </Grid>
                </DialogTitle>
              </Dialog>

              {/** Document Preview Dailog - OK */}
              <Dialog
                fullWidth
                maxWidth={"xl"}
                open={documentPreviewDialog}
                onClose={() => documentPreviewDailogClose()}
              >
                <Paper sx={{ p: 2 }}>
                  <CssBaseline />
                  <DialogTitle>
                    <Grid container>
                      <Grid
                        item
                        xs={6}
                        sm={6}
                        lg={6}
                        xl={6}
                        md={6}
                        sx={{
                          display: "flex",
                          alignItem: "left",
                          justifyContent: "left",
                        }}
                      >
                        Document Preview
                      </Grid>
                      <Grid
                        item
                        xs={1}
                        sm={2}
                        md={4}
                        lg={6}
                        xl={6}
                        sx={{ display: "flex", justifyContent: "center" }}
                      >
                        <IconButton
                          aria-label='delete'
                          sx={{
                            marginLeft: "530px",
                            backgroundColor: "primary",
                            ":hover": {
                              bgcolor: "red", // theme.palette.primary.main
                              color: "white",
                            },
                          }}
                          onClick={() => documentPreviewDailogClose()}
                        >
                          <CloseIcon
                            sx={{
                              color: "black",
                            }}
                          />
                        </IconButton>
                      </Grid>
                    </Grid>
                  </DialogTitle>
                  {/**
                  <DialogContent
                    style={{
                      display: "flex",
                      justifyContent: "center",
                      alignItems: "center",
                    }}
                  >
                    <TableContainer>
                      <Table>
                        <TableHead
                          stickyHeader={true}
                          sx={{
                            // textDecorationColor: "white",
                            backgroundColor: "#1890ff",
                          }}
                        >
                          <TableRow>
                            <TableCell style={{ color: "white" }}>
                              sr.no
                            </TableCell>
                            <TableCell style={{ color: "white" }}>
                              <h3>Document Name</h3>
                            </TableCell>
                            <TableCell style={{ color: "white" }}>
                              <h3>Mandatory</h3>
                            </TableCell>
                            <TableCell style={{ color: "white" }}>
                              <h3>View Document</h3>
                            </TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          <TableRow>
                            <TableCell>1 </TableCell>
                            <TableCell>Aadhaar Card</TableCell>
                            <TableCell>Required</TableCell>
                            <TableCell>
                              <UploadButton1
                                appName='HMS'
                                serviceName='H-IssuanceofHawkerLicense'
                                filePath={setAadhaarCardPhoto}
                                fileName={getValues("aadhaarCardPhoto")}
                              />
                            </TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>2 </TableCell>
                            <TableCell>Pan </TableCell>
                            <TableCell>Required</TableCell>
                            <TableCell>
                              <UploadButton1
                                appName='HMS'
                                serviceName='H-IssuanceofHawkerLicense'
                                filePath={setPanCardPhoto}
                                fileName={getValues("panCardPhoto")}
                              />
                            </TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>3</TableCell>
                            <TableCell>Ration Card</TableCell>
                            <TableCell>Required</TableCell>
                            <TableCell>
                              <UploadButton1
                                appName='HMS'
                                serviceName='H-IssuanceofHawkerLicense'
                                filePath={setRationCardPhoto}
                                fileName={getValues("rationCardPhoto")}
                              />
                            </TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>4</TableCell>
                            <TableCell>Disablity Certificate</TableCell>
                            <TableCell>Required</TableCell>
                            <TableCell>
                              <UploadButton1
                                appName='HMS'
                                serviceName='H-IssuanceofHawkerLicense'
                                filePath={disablityCertificatePhoto}
                                fileName={getValues(
                                  "disablityCertificatePhoto",
                                )}
                              />
                            </TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>5</TableCell>
                            <TableCell>Affidavite </TableCell>
                            <TableCell>Required</TableCell>
                            <TableCell>
                              <UploadButton1
                                appName='HMS'
                                serviceName='H-IssuanceofHawkerLicense'
                                filePath={seteAffidaviteOnRS100StampAttache}
                                fileName={getValues(
                                  "affidaviteOnRS100StampAttache",
                                )}
                              />
                            </TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell>6</TableCell>
                            <TableCell>Other Documents</TableCell>
                            <TableCell>Required</TableCell>
                            <TableCell>
                              <UploadButton1
                                appName='HMS'
                                serviceName='H-IssuanceofHawkerLicense'
                                filePath={setOtherDocumentPhoto}
                                fileName={getValues("otherDocumentPhoto")}
                              />
                            </TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </DialogContent>
                  */}
                  {/**
                  <Grid container>
                    <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>
                      <Stack
                        direction='row'
                        spacing={2}
                        sx={{ display: "flex", justifyContent: "center" }}
                      >
                        <Button
                          type='submit'
                          variant='contained'
                          onClick={() => approveButton()}
                        >
                          Approve
                        </Button>
                        <Button
                          variant='contained'
                          onClick={() => revertButton()}
                        >
                          Revert
                        </Button>
                      </Stack>
                    </Grid>
                  </Grid>
                  */}
                  <DialogTitle>
                    <Grid
                      item
                      xs={12}
                      sm={12}
                      md={12}
                      lg={12}
                      xl={12}
                      sx={{ display: "flex", justifyContent: "flex-end" }}
                    >
                      <Button
                        variant='contained'
                        // onClick={() => alert("dsf")}

                        onClick={() => documentPreviewDailogClose()}
                      >
                        Exit
                      </Button>
                    </Grid>
                  </DialogTitle>
                </Paper>
              </Dialog>

              {/** Site Visit Modal*/}
              <Dialog
                fullWidth
                maxWidth={"lg"}
                open={siteVisitDailog}
                onClose={() => siteVisitClose()}
              >
                <CssBaseline />
                <DialogTitle>
                  <Grid container>
                    <Grid item xs={6} sm={6} lg={6} xl={6} md={6}>
                      Site Visit
                    </Grid>
                    <Grid
                      item
                      xs={1}
                      sm={2}
                      md={4}
                      lg={6}
                      xl={6}
                      sx={{ display: "flex", justifyContent: "center" }}
                    >
                      <IconButton
                        aria-label='delete'
                        sx={{
                          marginLeft: "530px",
                          backgroundColor: "primary",
                          ":hover": {
                            bgcolor: "red", // theme.palette.primary.main
                            color: "white",
                          },
                        }}
                        onClick={() => siteVisitClose()}
                      >
                        <CloseIcon
                          sx={{
                            color: "black",
                          }}
                        />
                      </IconButton>
                    </Grid>
                  </Grid>
                </DialogTitle>
                {/**
                <DialogContent>
                  <BasicApplicationDetails />
                  <HawkerDetails />
                  <AddressOfHawker />
                  <AadharAuthentication />
                  <PropertyAndWaterTaxes />
                  <AdditionalDetails />
                  <SiteVisit
                    siteVisitDailogP={setSetVisitDailog}
                    appID={getValues("id")}
                  />
                </DialogContent>
                */}

                <DialogTitle>
                  <Grid
                    item
                    xs={12}
                    sm={12}
                    md={12}
                    lg={12}
                    xl={12}
                    sx={{ display: "flex", justifyContent: "flex-end" }}
                  >
                    <Button
                      variant='contained'
                      onClick={() => siteVisitClose()}
                    >
                      Exit
                    </Button>
                  </Grid>
                </DialogTitle>
              </Dialog>

              {/** Site Visit Schedule Modal OK*/}
              <Modal
                open={siteVisitScheduleModal}
                onClose={() => siteVisitScheduleClose()}
                sx={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  padding: 5,
                }}
              >
                {/**
                <Paper
                  sx={{
                    // backgroundColor: "#F5F5F5",
                    padding: 2,
                    height: "600px",
                    width: "500px",
                    // display: "flex",
                    // alignItems: "center",
                    // justifyContent: "center",
                  }}
                  elevation={5}
                  component={Box}
                >
                  <CssBaseline />
                  <SiteVisitSchedule appID={getValues("id")} />
                  <Grid container>
                    <Grid
                      item
                      xs={12}
                      sm={12}
                      md={12}
                      lg={12}
                      xl={12}
                      sx={{ display: "flex", justifyContent: "flex-end" }}
                    >
                      <Button
                        variant='contained'
                        onClick={() => siteVisitScheduleClose()}
                      >
                        Exit
                      </Button>
                    </Grid>
                  </Grid>
                </Paper>
                */}
              </Modal>

              {/** LOI Generation OK */}
              <Dialog
                fullWidth
                maxWidth={"lg"}
                open={loiGeneration}
                onClose={() => loiGenerationClose()}
              >
                <CssBaseline />
                <DialogTitle>
                  <Grid container>
                    <Grid item xs={6} sm={6} lg={6} xl={6} md={6}>
                      LOI Generation
                    </Grid>
                    <Grid
                      item
                      xs={1}
                      sm={2}
                      md={4}
                      lg={6}
                      xl={6}
                      sx={{ display: "flex", justifyContent: "center" }}
                    >
                      <IconButton
                        aria-label='delete'
                        sx={{
                          marginLeft: "530px",
                          backgroundColor: "primary",
                          ":hover": {
                            bgcolor: "red", // theme.palette.primary.main
                            color: "white",
                          },
                        }}
                        onClick={() => loiGenerationClose()}
                      >
                        <CloseIcon
                          sx={{
                            color: "black",
                          }}
                        />
                      </IconButton>
                    </Grid>
                  </Grid>
                </DialogTitle>
                {/**
                <DialogContent>
                  <LoiGenerationComponent />
                </DialogContent>
                */}
                <DialogTitle>
                  <Grid
                    item
                    xs={12}
                    sm={12}
                    md={12}
                    lg={12}
                    xl={12}
                    sx={{ display: "flex", justifyContent: "flex-end" }}
                  >
                    <Button
                      variant='contained'
                      onClick={() => loiGenerationClose()}
                    >
                      Exit
                    </Button>
                  </Grid>
                </DialogTitle>
              </Dialog>

              {/** LOI Collection Ok */}
              <Dialog
                fullWidth
                maxWidth={"lg"}
                open={loiCollection}
                onClose={() => loiCollectionClose()}
              >
                <CssBaseline />
                <DialogTitle>
                  <Grid container>
                    <Grid item xs={6} sm={6} lg={6} xl={6} md={6}>
                      LOI Collection
                    </Grid>
                    <Grid
                      item
                      xs={1}
                      sm={2}
                      md={4}
                      lg={6}
                      xl={6}
                      sx={{ display: "flex", justifyContent: "center" }}
                    >
                      <IconButton
                        aria-label='delete'
                        sx={{
                          marginLeft: "530px",
                          backgroundColor: "primary",
                          ":hover": {
                            bgcolor: "red", // theme.palette.primary.main
                            color: "white",
                          },
                        }}
                        onClick={() => loiCollectionClose()}
                      >
                        <CloseIcon
                          sx={{
                            color: "black",
                          }}
                        />
                      </IconButton>
                    </Grid>
                  </Grid>
                </DialogTitle>
                {/**
                <DialogContent>
                  <LoiCollectionComponent />
                </DialogContent>
                */}
                <DialogTitle>
                  <Grid
                    item
                    xs={12}
                    sm={12}
                    md={12}
                    lg={12}
                    xl={12}
                    sx={{ display: "flex", justifyContent: "flex-end" }}
                  >
                    <Button
                      variant='contained'
                      onClick={() => loiCollectionClose()}
                    >
                      Exit
                    </Button>
                  </Grid>
                </DialogTitle>
              </Dialog>

              {/** LOI Collection Payment Recipt OK */}
              <Dialog
                fullWidth
                maxWidth={"lg"}
                open={loiCollectionPaymentRecipt}
                onClose={() => loiCollectionPaymentReciptClose()}
              >
                <CssBaseline />
                <DialogTitle>
                  <FormattedLabel id='loiPreview' />
                </DialogTitle>
                {/**
                <DialogContent>
                  <ApplicationPaymentReceipt props={applicationData} />
                </DialogContent>
                */}
                <DialogTitle>
                  <Grid
                    item
                    xs={12}
                    sm={12}
                    md={12}
                    lg={12}
                    xl={12}
                    sx={{ display: "flex", justifyContent: "flex-end" }}
                  >
                    <Button
                      variant='contained'
                      onClick={() => loiCollectionPaymentReciptClose()}
                    >
                      Exit
                    </Button>
                  </Grid>
                </DialogTitle>
              </Dialog>

              {/** LOI Generation  Recipt  OK */}
              <Dialog
                fullWidth
                maxWidth={"lg"}
                open={loiGenerationRecipt}
                onClose={() => loiGenerationReciptClose()}
              >
                <CssBaseline />
                <DialogTitle>
                  <FormattedLabel id='loiPreview' />
                </DialogTitle>
                {/**
                <DialogContent>
                  <LoiGenerationRecipt props={applicationData} />
                </DialogContent>
                */}
                <DialogTitle>
                  <Grid
                    item
                    xs={12}
                    sm={12}
                    md={12}
                    lg={12}
                    xl={12}
                    sx={{ display: "flex", justifyContent: "flex-end" }}
                  >
                    <Button
                      variant='contained'
                      onClick={() => loiGenerationReciptClose()}
                    >
                      Exit
                    </Button>
                  </Grid>
                </DialogTitle>
              </Dialog>

              {/**  Certificate */}
              <Dialog
                fullWidth
                maxWidth={"lg"}
                open={certificate}
                onClose={() => closeCertificate()}
              >
                <CssBaseline />
                <DialogTitle>
                  <FormattedLabel id='viewCertificate' />
                </DialogTitle>
                {/**
                <DialogContent>
                  <IssuanceOfStreetVendorLicenseCertificate
                    props={applicationData}
                  />
                </DialogContent>
                */}
                <DialogTitle>
                  <Grid
                    item
                    xs={12}
                    sm={12}
                    md={12}
                    lg={12}
                    xl={12}
                    sx={{ display: "flex", justifyContent: "flex-end" }}
                  >
                    <Button
                      variant='contained'
                      onClick={() => closeCertificate()}
                    >
                      Exit
                    </Button>
                  </Grid>
                </DialogTitle>
              </Dialog>

              {/** I Card Certificate */}
              <Dialog
                fullWidth
                maxWidth={"lg"}
                open={iCard}
                onClose={() => closeICard()}
              >
                <CssBaseline />
                <DialogTitle>
                  <FormattedLabel id='iCard' />
                </DialogTitle>
                {/**
                <DialogContent>
                  <Identity props={applicationData} />
                </DialogContent>
                */}
                <DialogTitle>
                  <Grid
                    item
                    xs={12}
                    sm={12}
                    md={12}
                    lg={12}
                    xl={12}
                    sx={{ display: "flex", justifyContent: "flex-end" }}
                  >
                    <Button variant='contained' onClick={() => closeICard()}>
                      Exit
                    </Button>
                  </Grid>
                </DialogTitle>
              </Dialog>

              {/**  Verification AO */}
              <Dialog
                fullWidth
                maxWidth={"lg"}
                open={verificationAoDailog}
                onClose={() => verificationAoClose()}
              >
                <CssBaseline />
                <DialogTitle>Basic Application Details</DialogTitle>
                {/**
                <DialogContent>
                  <VerificationAppplicationDetails props={applicationData} />
                </DialogContent>
                */}
                <DialogTitle>
                  <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>
                    <Stack
                      style={{ display: "flex", justifyContent: "center" }}
                      spacing={3}
                      direction={"row"}
                    >
                      <Button
                        variant='contained'
                        style={{ backgroundColor: "green" }}
                        onClick={() => approveRevertRemarkDailogOpen()}
                      >
                        Action
                      </Button>
                      <Button
                        style={{ backgroundColor: "red" }}
                        variant='contained'
                        onClick={() => verificationAoClose()}
                      >
                        Exit
                      </Button>
                    </Stack>
                  </Grid>
                </DialogTitle>
              </Dialog>

              {/** Approve Button   Preview Dailog  */}
              <Modal
                open={approveRevertRemarkDailog}
                onClose={() => approveRevertRemarkDailogClose()}
                sx={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  padding: 5,
                }}
              >
                {/**
                <Paper
                  sx={{
                    // backgroundColor: "#F5F5F5",
                    padding: 2,
                    height: "400px",
                    width: "600px",
                    // display: "flex",
                    // alignItems: "center",
                    // justifyContent: "center",
                  }}
                  elevation={5}
                  component={Box}
                >
                  <Grid container>
                    <Grid
                      item
                      xs={12}
                      sm={12}
                      md={12}
                      lg={12}
                      xl={12}
                      sx={{
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                      }}
                    >
                      <Typography
                        style={{ marginBottom: "30px", marginTop: "20px" }}
                        variant='h6'
                      >
                        Enter Remark for Application
                      </Typography>
                      <br />
                    </Grid>
                    <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>
                      <TextareaAutosize
                        style={{
                          width: "550px",
                          height: "200px",
                          display: "flex",
                          justifyContent: "center",
                          marginBottom: "30px",
                        }}
                        {...register("verificationRemark")}
                      />
                    </Grid>
                    <Grid
                      item
                      xs={12}
                      sm={12}
                      md={12}
                      lg={12}
                      xl={12}
                      sx={{
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                      }}
                    >
                      <Stack spacing={5} direction='row'>
                        <Button
                          variant='contained'
                          // type='submit'
                          style={{ backgroundColor: "green" }}
                          onClick={() => remarkFun("Approve")}
                        >
                          Approve
                        </Button>
                        <Button
                          variant='contained'
                          onClick={() => remarkFun("Revert")}
                        >
                          Revert
                        </Button>
                        <Button
                          style={{ backgroundColor: "red" }}
                          onClick={() => approveRevertRemarkDailogClose()}
                        >
                          Exit
                        </Button>
                      </Stack>
                    </Grid>
                  </Grid>
                </Paper>
                */}
              </Modal>
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  ===========
			  
			  
			       {/** Filters */}
              <div className={styles.gridCenter}>
                <Grid
                  container
                  component={Paper}
                  squar='true'
                  elevation={5}
                  m={2}
                  p={2}
                >
                  <Grid container>
                    <Grid
                      item
                      xs={12}
                      sm={12}
                      md={12}
                      lg={12}
                      xl={12}
                      style={{
                        backgroundColor: "#0084ff",
                        color: "white",
                        fontSize: 19,
                        // marginTop: 30,
                        // marginBottom: 30,
                        padding: 8,
                        paddingLeft: 10,
                        marginLeft: "10px",
                        marginRight: "45px",
                        borderRadius: 100,
                      }}
                    >
                      Filters
                    </Grid>
                  </Grid>
                  <Grid container ml={2}>
                    <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>
                      <FormControl
                        variant='standard'
                        sx={{ marginTop: 2 }}
                        error={!!errors.serviceName}
                      >
                        <InputLabel id='demo-simple-select-standard-label'>
                          <FormattedLabel id='serviceName' />
                        </InputLabel>
                        <Controller
                          render={({ field }) => (
                            <Select
                              value={field.value}
                              onChange={(value) => field.onChange(value)}
                              label='Service Name *'
                              sx={{ width: "38vw" }}
                            >
                              {serviceNames &&
                                serviceNames.map((serviceName, index) => (
                                  <MenuItem key={index} value={serviceName.id}>
                                    {serviceName.serviceName}
                                  </MenuItem>
                                ))}
                            </Select>
                          )}
                          name='serviceName'
                          control={control}
                          defaultValue=''
                        />
                        <FormHelperText>
                          {errors?.serviceName
                            ? errors.serviceName.message
                            : null}
                        </FormHelperText>
                      </FormControl>
                    </Grid>
                    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>
                      <FormControl
                        variant='standard'
                        sx={{ marginTop: 2 }}
                        error={!!errors.zoneKey}
                      >
                        <InputLabel id='demo-simple-select-standard-label'>
                          <FormattedLabel id='zone' />
                        </InputLabel>
                        <Controller
                          render={({ field }) => (
                            <Select
                              //sx={{ width: 230 }}
                              value={field.value}
                              onChange={(value) => field.onChange(value)}
                              label='Zone Name *'
                            >
                              {zoneKeys &&
                                zoneKeys.map((zoneKey, index) => (
                                  <MenuItem key={index} value={zoneKey.id}>
                                    {zoneKey.zoneKey}
                                  </MenuItem>
                                ))}
                            </Select>
                          )}
                          name='zoneKey'
                          control={control}
                          defaultValue=''
                        />
                        <FormHelperText>
                          {errors?.zoneKey ? errors.zoneKey.message : null}
                        </FormHelperText>
                      </FormControl>
                    </Grid>
                    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>
                      <FormControl
                        variant='standard'
                        sx={{ marginTop: 2 }}
                        error={!!errors.wardKey}
                      >
                        <InputLabel id='demo-simple-select-standard-label'>
                          <FormattedLabel id='ward' />
                        </InputLabel>
                        <Controller
                          render={({ field }) => (
                            <Select
                              value={field.value}
                              onChange={(value) => field.onChange(value)}
                              label='Ward Name *'
                            >
                              {wardKeys &&
                                wardKeys.map((wardKey, index) => (
                                  <MenuItem key={index} value={wardKey.id}>
                                    {wardKey.wardKey}
                                  </MenuItem>
                                ))}
                            </Select>
                          )}
                          name='wardKey'
                          control={control}
                          defaultValue=''
                        />
                        <FormHelperText>
                          {errors?.wardKey ? errors.wardKey.message : null}
                        </FormHelperText>
                      </FormControl>
                    </Grid>
                    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>
                      <FormControl variant='standard'>
                        <InputLabel htmlFor='standard-adornment'>
                          Application Number
                        </InputLabel>
                        <Input
                          id='standard-adornment'
                          {...register("applicantNumber")}
                          endAdornment={
                            <InputAdornment position='end'>
                              <IconButton>
                                <SearchIcon />
                              </IconButton>
                            </InputAdornment>
                          }
                        />
                      </FormControl>
                    </Grid>

                    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>
                      <FormControl variant='standard'>
                        <InputLabel htmlFor='standard-adornment'>
                          Applicant Name
                        </InputLabel>
                        <Input
                          id='standard-adornment'
                          {...register("applicantName")}
                          endAdornment={
                            <InputAdornment position='end'>
                              <IconButton>
                                <SearchIcon />
                              </IconButton>
                            </InputAdornment>
                          }
                        />
                      </FormControl>
                    </Grid>
                    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>
                      {" "}
                      <FormControl
                        sx={{ marginTop: 0 }}
                        error={!!errors.fromDate}
                      >
                        <Controller
                          name='fromDate'
                          control={control}
                          defaultValue={null}
                          render={({ field }) => (
                            <LocalizationProvider dateAdapter={AdapterMoment}>
                              <DatePicker
                                inputFormat='DD/MM/YYYY'
                                label={
                                  <span style={{ fontSize: 16, marginTop: 2 }}>
                                    From Date
                                  </span>
                                }
                                value={field.value}
                                onChange={(date) => field.onChange(date)}
                                selected={field.value}
                                center
                                renderInput={(params) => (
                                  <TextField
                                    {...params}
                                    size='small'
                                    fullWidth
                                    InputLabelProps={{
                                      style: {
                                        fontSize: 12,
                                        marginTop: 3,
                                      },
                                    }}
                                  />
                                )}
                              />
                            </LocalizationProvider>
                          )}
                        />
                        <FormHelperText>
                          {errors?.fromDate ? errors.fromDate.message : null}
                        </FormHelperText>
                      </FormControl>
                    </Grid>
                    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>
                      <FormControl
                        sx={{ marginTop: 0 }}
                        error={!!errors.toDate}
                      >
                        <Controller
                          control={control}
                          name='toDate'
                          defaultValue={null}
                          render={({ field }) => (
                            <LocalizationProvider dateAdapter={AdapterMoment}>
                              <DatePicker
                                inputFormat='DD/MM/YYYY'
                                label={
                                  <span style={{ fontSize: 16, marginTop: 2 }}>
                                    To Date
                                  </span>
                                }
                                value={field.value}
                                onChange={(date) => field.onChange(date)}
                                selected={field.value}
                                center
                                renderInput={(params) => (
                                  <TextField
                                    {...params}
                                    size='small'
                                    fullWidth
                                    InputLabelProps={{
                                      style: {
                                        fontSize: 12,
                                        marginTop: 3,
                                      },
                                    }}
                                  />
                                )}
                              />
                            </LocalizationProvider>
                          )}
                        />
                        <FormHelperText>
                          {errors?.toDate ? errors.toDate.message : null}
                        </FormHelperText>
                      </FormControl>
                    </Grid>
                  </Grid>
                  <Grid container ml={2}>
                    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>
                      <Button
                        sx={{
                          marginTop: "5vh",
                          margin: "normal",
                          width: 230,
                          size: "medium",
                        }}
                        variant='contained'
                        onClick={() => mrFilterTableData()}
                      >
                        Find
                      </Button>
                    </Grid>
                    <Grid item xs={12} sm={6} md={4} lg={3} xl={2}>
                      <Button
                        sx={{
                          marginTop: "5vh",
                          margin: "normal",
                          width: 230,
                          size: "medium",
                        }}
                        variant='contained'
                        onClick={() => resetFilterData()}
                      >
                        Reset
                      </Button>
                    </Grid>
                  </Grid>
                </Grid>
              </div>
			  
			  
			  
			  
			  
			  
			  
			  
			  ===================
			   <Grid container>
          {/** Clerk */}
          <Grid item xs={4}>
            <Paper
              sx={{ height: "160px" }}
              component={Box}
              p={2}
              m={2}
              squar='true'
              elevation={5}
            >
              <Typography variant='h6'>
                <strong>WelCome </strong>
              </Typography>

              <Typography variant='h6' style={{ justifyContent: "center" }}>
                <strong>Officer Name</strong>
              </Typography>
              <Typography variant='subtitle'>
                <strong>Deparmental clark </strong>
              </Typography>
              <br />
            </Paper>
          </Grid>
          {/** Applicatins Tabs */}
          <Grid item xs={8}>
            <Paper
              sx={{ height: "160px" }}
              component={Box}
              p={2}
              m={2}
              squar='true'
              elevation={5}
              // sx={{ align: "center" }}
            >
              <div className={styles.test}>
                {/** Total Application */}
                <div
                  className={styles.one}
                  onClick={() => clerkTabClick("TotalApplications")}
                >
                  <div className={styles.icono}>
                    <BabyChangingStationIcon color='primary' />
                  </div>
                  <br />
                  <div className={styles.icono}>
                    <strong align='center'>Total Application</strong>
                  </div>
                  <Typography variant='h6' align='center' color='primary'>
                    {totalApplication}
                  </Typography>
                </div>

                {/** Vertical Line */}
                <div className={styles.jugaad}></div>

                {/** Approved Application */}
                <div
                  className={styles.one}
                  onClick={() => clerkTabClick("APPROVED")}
                >
                  <div className={styles.icono}>
                    <ThumbUpAltIcon color='success' />
                  </div>
                  <br />
                  <div className={styles.icono}>
                    <strong align='center'>Approved Application</strong>
                  </div>
                  <Typography variant='h6' align='center' color='green'>
                    {approvedApplication}
                  </Typography>
                </div>

                {/** Vertical Line */}
                <div className={styles.jugaad}></div>

                {/** Pending Applications */}
                <div
                  className={styles.one}
                  onClick={() => clerkTabClick("PENDING")}
                >
                  <div className={styles.icono}>
                    <PendingActionsIcon color='warning' />
                  </div>
                  <br />
                  <div className={styles.icono}>
                    <strong align='center'> Pending Application</strong>
                  </div>
                  <Typography variant='h6' align='center' color='orange'>
                    {pendingApplication}
                  </Typography>
                </div>

                {/** Vertical Line */}
                <div className={styles.jugaad}></div>

                {/** Rejected Application */}
                <div
                  className={styles.one}
                  onClick={() => clerkTabClick("REJECTED")}
                >
                  <div className={styles.icono}>
                    <CancelIcon color='error' />
                  </div>
                  <br />
                  <div className={styles.icono}>
                    <strong align='center'>Rejected Application</strong>
                  </div>
                  <Typography variant='h6' align='center' color='error'>
                    {rejectedApplication}
                  </Typography>
                </div>
              </div>
            </Paper>
          </Grid>
        </Grid>